// <auto-generated />
using System;
using Barbuuuda.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Barbuuuda.Migrations.PostgreDb
{
    [DbContext(typeof(PostgreDbContext))]
    partial class PostgreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Barbuuuda.Models.Task.TaskCategoryDto", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("category_id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CategoryCode")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("category_code");

                    b.Property<string>("CategoryName")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("category_name");

                    b.HasKey("CategoryId");

                    b.ToTable("TaskCategories", "dbo");
                });

            modelBuilder.Entity("Barbuuuda.Models.Task.TaskDto", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("task_id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CategoryCode")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("category_code");

                    b.Property<int>("CountOffers")
                        .HasColumnType("integer")
                        .HasColumnName("count_offers");

                    b.Property<int>("CountViews")
                        .HasColumnType("integer")
                        .HasColumnName("count_views");

                    b.Property<int?>("ExecutorId")
                        .HasColumnType("integer")
                        .HasColumnName("executor_id");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.Property<string>("SpecCode")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("spec_code");

                    b.Property<string>("StatusCode")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("status_code");

                    b.Property<DateTime>("TaskBegda")
                        .HasColumnType("timestamp")
                        .HasColumnName("task_begda");

                    b.Property<string>("TaskDetail")
                        .HasColumnType("text")
                        .HasColumnName("task_detail");

                    b.Property<DateTime>("TaskEndda")
                        .HasColumnType("timestamp")
                        .HasColumnName("task_endda");

                    b.Property<double?>("TaskPrice")
                        .HasColumnType("money")
                        .HasColumnName("task_price");

                    b.Property<string>("TaskTitle")
                        .HasColumnType("text")
                        .HasColumnName("task_title");

                    b.Property<string>("TypeCode")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("type_code");

                    b.HasKey("TaskId");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Tasks", "dbo");
                });

            modelBuilder.Entity("Barbuuuda.Models.Task.TaskSpecializationDto", b =>
                {
                    b.Property<int>("SpecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("spec_id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("SpecCode")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("spec_code");

                    b.Property<string>("SpecName")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("spec_name");

                    b.HasKey("SpecId");

                    b.ToTable("TaskSpecializations", "dbo");
                });

            modelBuilder.Entity("Barbuuuda.Models.Task.TaskStatusDto", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("status_id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("StatusCode")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("status_code");

                    b.Property<string>("StatusName")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("status_name");

                    b.HasKey("StatusId");

                    b.ToTable("TaskStatuses", "dbo");
                });

            modelBuilder.Entity("Barbuuuda.Models.Task.TaskTypeDto", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("type_id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("TypeCode")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("type_code");

                    b.Property<string>("TypeName")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("type_name");

                    b.HasKey("TypeId");

                    b.ToTable("TaskTypes", "dbo");
                });

            modelBuilder.Entity("Barbuuuda.Models.User.UserDto", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CountNegative")
                        .HasColumnType("integer")
                        .HasColumnName("count_negative");

                    b.Property<int>("CountPositive")
                        .HasColumnType("integer")
                        .HasColumnName("count_positive");

                    b.Property<DateTime>("DateRegister")
                        .HasColumnType("timestamp")
                        .HasColumnName("date_register");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean")
                        .HasColumnName("is_online");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("Patronymic")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("patronymic");

                    b.Property<double>("Rating")
                        .HasColumnType("double")
                        .HasColumnName("rating");

                    b.Property<string>("Token")
                        .HasColumnType("varchar(max)")
                        .HasColumnName("token");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("user_email");

                    b.Property<string>("UserIcon")
                        .HasColumnType("varchar(max)")
                        .HasColumnName("user_icon");

                    b.Property<string>("UserLogin")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("user_login");

                    b.Property<string>("UserPassword")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("user_password");

                    b.Property<string>("UserPhone")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("user_phone");

                    b.Property<string>("UserType")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("user_type");

                    b.HasKey("UserId");

                    b.ToTable("Users", "dbo");
                });

            modelBuilder.Entity("Barbuuuda.Models.Task.TaskDto", b =>
                {
                    b.HasOne("Barbuuuda.Models.User.UserDto", "Executor")
                        .WithMany()
                        .HasForeignKey("ExecutorId");

                    b.HasOne("Barbuuuda.Models.User.UserDto", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Executor");

                    b.Navigation("Owner");
                });
#pragma warning restore 612, 618
        }
    }
}
