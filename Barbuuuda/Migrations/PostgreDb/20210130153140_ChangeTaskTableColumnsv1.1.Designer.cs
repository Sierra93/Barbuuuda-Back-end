// <auto-generated />
using System;
using Barbuuuda.Core.Data;
using Barbuuuda.Models.Task;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Barbuuuda.Migrations.PostgreDb
{
    [DbContext(typeof(PostgreDbContext))]
    [Migration("20210130153140_ChangeTaskTableColumnsv1.1")]
    partial class ChangeTaskTableColumnsv11
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Barbuuuda.Models.Task.TaskCategoryDto", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("category_id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CategoryCode")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("category_code");

                    b.Property<string>("CategoryName")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("category_name");

                    b.Property<Specialization[]>("Specializations")
                        .HasColumnType("jsonb")
                        .HasColumnName("specializations");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("CategoryId");

                    b.ToTable("TaskCategories", "dbo");
                });

            modelBuilder.Entity("Barbuuuda.Models.Task.TaskDto", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("TaskId")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CategoryCode")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CategoryCode");

                    b.Property<int>("CountOffers")
                        .HasColumnType("integer")
                        .HasColumnName("CountOffers");

                    b.Property<int>("CountViews")
                        .HasColumnType("integer")
                        .HasColumnName("CountViews");

                    b.Property<string>("ExecutorId")
                        .HasColumnType("varchar(150)")
                        .HasColumnName("ExecutorId");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("OwnerId");

                    b.Property<string>("SpecCode")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SpecCode");

                    b.Property<string>("StatusCode")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("StatusCode");

                    b.Property<DateTime>("TaskBegda")
                        .HasColumnType("timestamp")
                        .HasColumnName("TaskBegda");

                    b.Property<string>("TaskDetail")
                        .HasColumnType("text")
                        .HasColumnName("TaskDetail");

                    b.Property<DateTime>("TaskEndda")
                        .HasColumnType("timestamp")
                        .HasColumnName("TaskEndda");

                    b.Property<decimal?>("TaskPrice")
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("TaskPrice");

                    b.Property<string>("TaskTitle")
                        .HasColumnType("text")
                        .HasColumnName("TaskTitle");

                    b.Property<string>("TypeCode")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TypeCode");

                    b.HasKey("TaskId");

                    b.ToTable("Tasks", "dbo");
                });

            modelBuilder.Entity("Barbuuuda.Models.Task.TaskStatusDto", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("status_id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("StatusCode")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("status_code");

                    b.Property<string>("StatusName")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("status_name");

                    b.HasKey("StatusId");

                    b.ToTable("TaskStatuses", "dbo");
                });

            modelBuilder.Entity("Barbuuuda.Models.Task.TaskTypeDto", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("type_id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("TypeCode")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("type_code");

                    b.Property<string>("TypeName")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("type_name");

                    b.HasKey("TypeId");

                    b.ToTable("TaskTypes", "dbo");
                });

            modelBuilder.Entity("Barbuuuda.Models.User.UserDto", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AboutInfo")
                        .HasColumnType("text")
                        .HasColumnName("AboutInfo");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("Age");

                    b.Property<string>("City")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("City");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<int>("CountNegative")
                        .HasColumnType("integer")
                        .HasColumnName("CountNegative");

                    b.Property<int>("CountPositive")
                        .HasColumnType("integer")
                        .HasColumnName("CountPositive");

                    b.Property<DateTime>("DateRegister")
                        .HasColumnType("timestamp")
                        .HasColumnName("DateRegister");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FirstName");

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(1)")
                        .HasColumnName("Gender");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean")
                        .HasColumnName("IsOnline");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LastName");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Patronymic");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Plan")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Plan");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("Rating");

                    b.Property<bool>("RememberMe")
                        .HasColumnType("boolean")
                        .HasColumnName("RememberMe");

                    b.Property<decimal?>("Score")
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("Score");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserIcon")
                        .HasColumnType("text")
                        .HasColumnName("UserIcon");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<string>("UserPassword")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("UserPassword");

                    b.Property<string>("UserRole")
                        .HasColumnType("varchar(1)")
                        .HasColumnName("UserRole");

                    b.Property<string>("UserToken")
                        .HasColumnType("text")
                        .HasColumnName("UserToken");

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
