<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Barbuuuda</name>
    </assembly>
    <members>
        <member name="T:Barbuuuda.Controllers.BaseController">
            <summary>
            Базовый контроллер для всех контроллеров.
            </summary>
        </member>
        <member name="M:Barbuuuda.Controllers.BaseController.GetUserName">
            <summary>
            Метод получает имя текущего юзера.
            </summary>
            <returns>Имя юзера.</returns>
        </member>
        <member name="T:Barbuuuda.Controllers.ExecutorController">
            <summary>
            Контроллер содержит методы по работе с исполнителями сервиса.
            </summary>
        </member>
        <member name="M:Barbuuuda.Controllers.ExecutorController.GetExecutorListAsync">
            <summary>
            Метод выгружает список исполнителей сервиса.
            </summary>
            <returns>Список исполнителей.</returns>
        </member>
        <member name="M:Barbuuuda.Controllers.ExecutorController.AddExecutorSpecializations(Barbuuuda.Models.User.UserEntity)">
            <summary>
            Метод добавляет специализации исполнителя.
            </summary>
            <param name="executor">Объект юзера.</param>             
        </member>
        <member name="T:Barbuuuda.Controllers.MainPageController">
            <summary>
            Контроллер главной страницы.
            </summary>
        </member>
        <member name="M:Barbuuuda.Controllers.MainPageController.GetFonContent">
            <summary>
            Метод получает информацию для главного фона.
            </summary>
            <returns>Объект фона.</returns>
        </member>
        <member name="M:Barbuuuda.Controllers.MainPageController.GetWhyContent">
            <summary>
            Метод выгружает данные для блока "ПОЧЕМУ BARBUUUDA".
            </summary>
            <returns>Все объекты WhyDto</returns>
        </member>
        <member name="M:Barbuuuda.Controllers.MainPageController.GetWorkContent">
            <summary>
            Метод выгружает данные для блока "КАК ЭТО РАБОТАЕТ".
            </summary>
            <returns>Все объекты WorkDto</returns>
        </member>
        <member name="M:Barbuuuda.Controllers.MainPageController.GetPrivilegeContent">
            <summary>
            Метод выгружает данные для блока "ЧТО ВЫ ПОЛУЧАЕТЕ"
            </summary>
            <returns>Все объекты PrivilegeDto</returns>
        </member>
        <member name="M:Barbuuuda.Controllers.MainPageController.GetAdvantageContent">
            <summary>
            Метод возвращает данные для блока "Преимущества"
            </summary>
            <returns>Все объекты Advantage</returns>
        </member>
        <member name="M:Barbuuuda.Controllers.MainPageController.GetCategoryList">
            <summary>
            Метод выгружает список категорий заданий.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Barbuuuda.Controllers.MainPageController.GetHopeContent">
            <summary>
            Метод полчает данные долгосрочного сотрудничества.
            </summary>
            <returns>ОБъект с данными.</returns>
        </member>
        <member name="M:Barbuuuda.Controllers.MainPageController.GetLastTasksAsync">
            <summary>
            Метод выгружает 5 последних заданий. Не важно, чьи они.
            </summary>
            <returns>Список с 5 заданиями.</returns>
        </member>
        <member name="T:Barbuuuda.Controllers.PaginationController">
            <summary>
            Контроллер работы с пагинацией.
            </summary>
        </member>
        <member name="M:Barbuuuda.Controllers.PaginationController.Index(System.String,System.Int32)">
            <summary>
            Метод пагинации.
            </summary>
            <param name="pageIdx"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="T:Barbuuuda.Controllers.TaskController">
            <summary>
            Контроллер содержит логику работы с заданиями.
            </summary>
        </member>
        <member name="M:Barbuuuda.Controllers.TaskController.CreateTask(Barbuuuda.Models.Task.TaskEntity)">
            <summary>
            Метод создает новое задание.
            </summary>
            <param name="oTask">Объект с данными задания.</param>
            <returns>Вернет данные созданного задания.</returns>
        </member>
        <member name="M:Barbuuuda.Controllers.TaskController.EditTask(Barbuuuda.Models.Task.TaskEntity)">
            <summary>
            Метод создает новое задание.
            </summary>
            <param name="oTask">Объект с данными задания.</param>
            <returns>Вернет данные измененного задания.</returns>
        </member>
        <member name="M:Barbuuuda.Controllers.TaskController.GetCategories">
            <summary>
            Метод выгружает список категорий заданий.
            </summary>
            <returns>Коллекцию категорий.</returns>
        </member>
        <member name="M:Barbuuuda.Controllers.TaskController.GetSpecializations">
            <summary>
            Метод выгружает список специализаций заданий.
            </summary>
            <returns>Коллекцию специализаций.</returns>
        </member>
        <member name="M:Barbuuuda.Controllers.TaskController.GetTasksList(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Метод получает список заданий заказчика или конкретное задание.
            </summary>
            <param name="userId">Id заказчика.</param>
            <param name="taskId">Id задания.</param>
            <param name="type">Параметр получения заданий либо все либо одно.</param>
            <returns>Коллекция заданий.</returns>
        </member>
        <member name="M:Barbuuuda.Controllers.TaskController.DeleteTask(System.Int32)">
            <summary>
            Метод удаляет задание.
            </summary>
            <param name="taskId">Id задачи.</param>
        </member>
        <member name="M:Barbuuuda.Controllers.TaskController.FilterTask(System.String)">
            <summary>
            Метод фильтрует задания заказчика по параметру.
            </summary>
            <param name="query">Параметр фильтрации.</param>
            <returns>Отфильтрованные данные.</returns>
        </member>
        <member name="M:Barbuuuda.Controllers.TaskController.SearchTask(System.String)">
            <summary>
            Метод ищет задание по Id или названию.
            </summary>
            <param name="param">Поисковый параметр.</param>
            <returns>Результат поиска.</returns>
        </member>
        <member name="M:Barbuuuda.Controllers.TaskController.GetSearchTaskDate(System.String)">
            <summary>
            Метод ищет задания указанной даты.
            </summary>
            <param name="date">Параметр даты.</param>
            <returns>Найденные задания.</returns>
        </member>
        <member name="M:Barbuuuda.Controllers.TaskController.LoadActiveTasks(System.String)">
            <summary>
            Метод выгружает активные задания заказчика.
            </summary>
            <returns>Список активных заданий.</returns>
        </member>
        <member name="M:Barbuuuda.Controllers.TaskController.GetCountTaskStatuses">
            <summary>
            Метод получает кол-во задач определенного статуса.
            </summary>
            <returns>Число кол-ва задач.</returns>
        </member>
        <member name="M:Barbuuuda.Controllers.TaskController.GetStatusTasks(System.String,System.String)">
            <summary>
            Метод получает задания определенного статуса.
            </summary>
            <param name="status">Название статуса.</param>
            <param name="userId">Id пользователя.</param>
            <returns>Список заданий с определенным статусом.</returns>
        </member>
        <member name="M:Barbuuuda.Controllers.TaskController.GetTotalCountTasks(System.String)">
            <summary>
            Метод получает кол-во заданий всего.
            </summary>
            <param name="userId">Id пользователя.</param>
            <returns></returns>
        </member>
        <member name="M:Barbuuuda.Controllers.TaskController.LoadAuctionTasks">
            <summary>
            Метод получает список заданий в аукционе. Выводит задания в статусе "В аукционе".
            </summary>
            <returns>Список заданий.</returns>
        </member>
        <member name="T:Barbuuuda.Controllers.UserController">
            <summary>
            Контроллер содержит логику работы с пользователями.
            </summary>        
        </member>
        <member name="M:Barbuuuda.Controllers.UserController.CreateUserAsync(Barbuuuda.Models.User.UserEntity)">
            <summary>
            Метод создает нового пользователя.
            <paramref name="user">Объект с данными юзера.</paramref>
            </summary>
        </member>
        <member name="M:Barbuuuda.Controllers.UserController.IdentityUserEmail(System.String)">
            <summary>
            Метод проверяет в БД существование юзера с таким email.
            </summary>
            <param name="email">Почта юзера.</param>
            <returns>true - если существует, иначе false.</returns>
        </member>
        <member name="M:Barbuuuda.Controllers.UserController.ConfirmAsync(System.String,System.String)">
            <summary>
            Метод проставит подтверждение регистрации в true и перенаправит на главную страницу сервиса.
            </summary>
            <param name="userId">Id юзера.</param>
            <param name="code">Временный код токена.</param>
        </member>
        <member name="M:Barbuuuda.Controllers.UserController.LoginUserAsync(Barbuuuda.Models.User.UserEntity)">
            <summary>
            Метод авторизует пользователя.
            <paramref name="user">Объект с данными юзера.</paramref>
            </summary>        
        </member>
        <member name="M:Barbuuuda.Controllers.UserController.GetUserAuthorize">
            <summary>
            TODO: нужно убрать этот метод, так как авторизация переделана на основе токенов и доступ и так будет отваливаться когда токен протухнет.
            Метод проверяет, авторизован ли юзер.
            </summary>
            <returns>Объект с данными авторизованного юзера.</returns>       
        </member>
        <member name="M:Barbuuuda.Controllers.UserController.GetProfileInfoAsync">
            <summary>
            Метод получает информацию о пользователе для профиля.
            </summary>
            <returns>Объект с данными о профиле пользователя.</returns>
        </member>
        <member name="M:Barbuuuda.Controllers.UserController.SaveProfileDataAsync(Barbuuuda.Models.User.UserEntity)">
            <summary>
            Метод сохраняет личные данные юзера.
            </summary>
            <param name="user">Объект с данными юзера.</param>
        </member>
    </members>
</doc>
